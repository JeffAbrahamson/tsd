# Source this file from your .bashrc in order to be able to call
# tsd.py as tsd and to get bash completion on series names and tsd
# subcommands.


# Completions for tsd
_tsd()
{
    local cur prev pprev opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    if [ ${#COMP_WORDS[@]} -gt 2 ]; then
	pprev="${COMP_WORDS[COMP_CWORD-2]}"
    else
	pprev=
    fi
    
    if [ Xtsd = X${prev} ]; then
	completions=$(tsd.py -L)
	COMPREPLY=( $(compgen -W "$completions" -- ${cur}) )
	return 0
    fi

    if [ Xtsd = X${pprev} ]; then
	completions=$(tsd.py -C)
	COMPREPLY=( $(compgen -W "$completions" -- ${cur}) )
	return 0
    fi
    
    #COMPREPLY=( $(compgen -W "" -- ${cur}) )
    return 0
}
complete -F _tsd tsd
# I don't want to have to type the .py, but I do want python to
# compile just once (create a .pyc).
tsd() { tsd.py $*; }


# A known bug is that prev and pprev are too positional and don't take
# into account options.  So "tsd -v series <tab>" won't work properly.
# Suggestions welcome.

isempty() { if [ "X$1" = X ]; then true; else false; fi; }
beginswith() { case "$2" in "$1"*) true;; *) false;; esac; }

# A function to tell me what time series (and values) have been
# recorded for a given day.  Without argument, defaults to the current
# day.
tsd-today() {
    if isempty "$1"; then
	day=$(date +%Y-%m-%d)
    elif beginswith "-" "$1"; then
	day=$(date -d @$(( $(date +%s) + $1 * 3600 * 24)) +%Y-%m-%d)
    else
	day="$1"
    fi
    (
	cd "$HOME/tsd"
	grep "$day" * | \
	    awk -F: '{split($2, tsd, "\t"); printf("%-30s  %s  %8.1f""\n", $1, tsd[1], tsd[2]);}'
    )
}

# How much do I read the news / did I read the news $1 days ago?
reading() { tsd-today $* | grep read | awk '{sum += $3} END {print sum;}' ;}
# How much have I read over the last week?  I plot would be better.
reading7() { for n in {-7..-1}; do reading $n; done; reading; }

# tsd-table() { tsd_table.py $* }
tsd-table() {
    (tsd-today -4; tsd-today -3; tsd-today -2; tsd-today -1; tsd-today) | gawk '
      {
        table[$1][$2] = $3;
      }
      END {
        printf("%-30s", "");
        for (line in table) {
            for (component in table[line]) { dates[component] = 1; }
        }
	asort(dates, date_indices);
	for (date in dates_sorted) { printf("%-12s", date); }
	for (index in date_indices) { print(index); printf("%-12s", date[index]); }
	printf("\n");
        for (line in table) {
            printf("%-30s", line);
	    for (date in dates_sorted) {
	        printf("%12s", table[line][date]);
	    }
	    printf("\n");
        }
      }' | sort;
}

# Repeat the last value in a series but for the current date.
tsd-last() { tsd $1 $(tsd $1 | tail -1 | awk '{print $2}'); }

# Print some statistics about a tsd series.
tsd-stats() { cat tsd/$1 | awk '{sum += $2; sumsq += $2^2;} END {printf("µ = %.1f   σ = %.1f   n = %d\n", sum/NR, sqrt(sumsq/NR-(sum/NR)^2), NR);}'; }

# Retrieve the most recent value in a series.
tsd-value() {
    tsd $1 | tail -1 | awk '{ printf("%d\n", $2) }';
}

# Count instances by month.
tsd-m-count() {
    cat "$HOME/tsd/$1" | awk '{print $1}' | uniq | sed -e 's/-[0-9][0-9]$//;' | uniq -c;
}

# Count instances by year.
tsd-y-count() {
    cat "$HOME/tsd/$1" | awk '{print $1}' | uniq | sed -e 's/-[0-9][0-9]-[0-9][0-9]$//;' | uniq -c;
}

# Sum values by month.
tsd-m-sum() {
    cat "$HOME/tsd/$1" | sed -e 's/-[0-9][0-9]\s/ /;' | \
	awk '{ arr[$1] += $2 } END { for (key in arr) printf("%s\t%s\n", key, arr[key]) }' | \
	sort
}

# Sum values by year.
tsd-y-sum() {
    cat "$HOME/tsd/$1" | sed -e 's/-[0-9][0-9]-[0-9][0-9]\s/ /;' | \
	awk '{ arr[$1] += $2 } END { for (key in arr) printf("%s\t%s\n", key, arr[key]) }' | \
	sort
}
